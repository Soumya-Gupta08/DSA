            **TIME COMPLEXITY**
            BEST:  O(1)
            WORST: O(n)

                1) In an array
                2) In a certain range of an array
                3) For the minimum value in the array
                4) In a 2D array
                5) For the maximum value in a 2D array
                6) In a string   {using .charAt() func}
                7) In a string   {using Arrays.toCharArray}


                        // to search linearly in an array //
    public static int linearSearch(int[] arr, int target) {
        if(arr.length==0) {
            return -1;
        }
        for(int idx=0; idx<arr.length; idx++) {
            // checking for each element
            if(arr[idx]==target) {
                return idx;
            }
        }
        // will execute if none matches
        //Hence, target not found.
        return -1;
    }



                            // to linearly search in a certain range of an array

    public static boolean rangeLinearSearch(int[] arr, int target, int start, int stop) {
        if(arr.length==0) {
            return false;
        }
        for(int idx=start; idx<=stop; idx++) {
            if(arr[idx]==target) {
                return true;
            }
        }
        return false;
    }

                            // to search linearly for the minimum value in the array

    public static int minSearch(int[] arr) {
        int min=arr[0];
        // iterating over the whole loop
        for(int idx=1; idx<arr.length; idx++) {
            // comparing with each element
            if(arr[idx]<min) {
                min=arr[idx];
            }
        }
        return min;
    }

                            // to search linearly in a 2D array
    public static int[] twoDLinearSearch(int[][] arr, int target) {
        if(arr.length==0) {
            return new int[] {-1, -1};
        }
        for(int row=0; row<arr.length; row++) {
            // checking for each element
            for(int col=0; col<arr[row].length; col++) {
                if(arr[row][col]==target) {
                    return new int[] {row, col};
                }
            }
        }
        // will execute if none matches
        //Hence, target not found.
        return new int[] {-1, -1};
    }

                            // to search for the max element in a 2D array

    public static int max2DSearch(int[][] arr) {
        int max=Integer.MIN_VALUE;
        for(int[] ar: arr) {
            for(int elem: ar) {
                if(elem>max) {
                    max=elem;
                }
            }
        }
        return max;
    }

                            // to search in a string
    public static int linearSearchIdx(String str, char target) {
        if(str.isEmpty()) {
            return -1;
        }
        for(int idx=0; idx<str.length(); idx++) {
            //checking for each character
            if(target==str.charAt(idx)) {
                return idx;
            }
        }

        return -1;
    }

                            // to linearly search in a string (converting it into an array)

    public static boolean linearSearch(String str, char target) {
        if(str.isEmpty()) {
            return false;
        }
        for(char ch: str.toCharArray()) {
            if(ch==target) {
                return true;
            }
        }
        return false;
    }
