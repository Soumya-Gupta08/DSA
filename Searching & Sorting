                    // bubble Sort //

    public static void bubbleSort(int[] arr) { //time complexity = O(n^2)
        for(int i=arr.length-1; i>=1; i--) { //n-1
            //comparing & swapping
            for(int j=1; j<=i; j++) { //n-1 + n-2 + ... + 1 = (n^2-n)/2
                if(arr[j]<arr[j-1]) {
                    //swap
                    int temp=arr[j];
                    arr[j]=arr[j-1];
                    arr[j-1]=temp;
                }
            }
        }
    }

                    // Selection Sort //

    public static void selectionSort(int[] arr) { //time complexity = O(n^2)
        for(int i=0; i<arr.length-1; i++) { //n-1
            int min=i;
            //comparing
            for(int j=i+1; j<arr.length; j++) { //n-1 + n-2 + ... + 1 = (n^2-n)/2
                if(arr[j]<arr[min]) {
                    min=j;
                }
            }
            //swapping
            int temp=arr[min];
            arr[min]=arr[i];
            arr[i]=temp;
        }
    }

                    // Insertion Sort //

    public static void insertionSort(int[] arr) {
        for(int i=1; i<arr.length; i++) {
            int c=arr[i];
            int j=i-1;
            while(c<arr[j] && j>=0) {
                arr[j+1]=arr[j];
                j--;
            }
            //placement
            arr[j+1]=c;
        }
    }

                    // Quick Sort //
