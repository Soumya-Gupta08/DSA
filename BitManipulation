                    // //

    public static int oneOutOfTwos(int[] arr) {
        int ans=0;
        for(int i: arr) {
            ans^=i;
        }
        return ans;
    }

                    // //

    public static int findIthBit(int n, int i) {
        return n&(1<<i-1);
    }

                    // //

    public static int setIthBit(int n, int i) {
        return n|(1<<i-1);
    }

                    // //

    public static int resetIthBit(int n, int i) {
        return n&~(1<<i-1);
    }

                    // //

    public static int positionOfRightMostSetBit(int n) {
        return n&-n;
    }

                    // //

    public static int oneOfTheThrees(int[] arr) { //Nice question♡♡   ❤️❤️
        int ans=0;
        int max=arr[0];
        for(int i: arr) {
            if(i>max) {
                max=i;
            }
        }
        int len=(int)(Math.log(max)/Math.log(2))+1;
        int[] sum=new int[len];
        int base=1;
        for(int i=len-1; i>=0; i--) {
            for(int j=0; j< arr.length; j++) {
                sum[i]+=arr[j]&1;
                arr[j]>>=1;
            }
            sum[i]%=3;
            ans+=sum[i]*base;
            base*=2;
        }
        return ans;
    }

                    // //

    public static int magicNumber(int n) {
        int pow=5;
        int ans=0;
        while(n>0) {
            int dig=n&1;
            ans+=dig*pow;
            pow*=5;
            n>>=1;
        }
        return ans;
    }

                    // //

    public static int sumOfNthRowinPascalsTri(int n) {
        return 1<<n-1;
    }

                    // //

    public static boolean powerOf2(int n) {
        return (n&n-1)==0;
    }

                    // //

    public static int expo(int a, int b) { //Nice question♡♡   ❤️❤️
        int base=a;                         // O(log2(n)+1)
        int ans=1;
        while(b>0) {
            if((b&1)==1) {
                ans *= base * (b & 1);
            }
            base*=base;
            b>>=1;
        }
        return ans;
    }

                    // //

    public static int numberOfSetBits(int n) {
        if(n==0 || n==1) {
            return n;
        }
        int i=0;
        while(n>0) {
            n-=n&-n;
            i++;
        }
        return i;
    }

                    // //

    public static int numberOfSetBits2(int n) {
        if(n==0 || n==1) {
            return n;
        }
        int i=0;
        while(n>0) {
            n&=n-1;
            i++;
        }
        return i;
    }

                    // //

    public static int xor(int n) {
        if(n%4==0) {
            return n;
        } else if(n%4==1) {
            return 1;
        } else if(n%4==2) {
            return n+1;
        } else {
            return 0;
        }
    }

                    // //

    public static int xorFromAtoB(int a, int b) {
        return xor(a-1)^xor(b);
    }
