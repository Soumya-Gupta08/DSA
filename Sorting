                    // bubble Sort //

    public static int[] bubbleSort(int[] arr) { // Time Complexity: O(n^2)
        for(int i=0; i<arr.length-1; i++) {     // Best Case: O(n)  {n-1}
            for(int j=1; j<arr.length-i; j++) { // n-1 + n-2 + --- + 2 + 1 = (n^2-n)/2
                if(arr[j]<arr[j-1]) {
                    // swap
                    int temp=arr[j];
                    arr[j]=arr[j-1];
                    arr[j-1]=temp;
                }
            }
        }
        return arr;
    }

                    // Selection Sort //

    public static int[] selectionSort(int[] arr) { // Time Complexity: O(n^2)
        for(int i=0; i<arr.length-1; i++) {        // Best Case: O(n^2)
            int idx=0;
            for (int j = 1; j < arr.length-i; j++) { // n-1 + n-2 + --- + 2 + 1 = (n^2-n)/2
                if (arr[j] > max) {
                    idx=j;
                }
            }
            // swap
            int temp=arr[idx];
            arr[idx]=arr[arr.length-1-i];
            arr[arr.length-1-i]=temp;
        }
        return arr;
    }
                    // Insertion Sort //

    public static void insertionSort(int[] arr) { // Apna college
        for(int i=1; i<arr.length; i++) {
            int c=arr[i];
            int j=i-1;
            while(c<arr[j] && j>=0) {
                arr[j+1]=arr[j];
                j--;
            }
            //placement
            arr[j+1]=c;
        }
    }
    public static int[] insertionSort(int[] arr) { // Time Complexity: O(n^2)
        for(int i=1; i<arr.length; i++) {     // Best Case: O(n)  {n-1}
            int j=i;
            while(j>0 && arr[j]<arr[j-1]) {
                // swap
                int temp=arr[j];
                arr[j]=arr[j-1];
                arr[j-1]=temp;

                j--;
            }
        }
        return arr;
    }

                    // Cyclic Sort //

    public static int[] cyclicSort(int[] arr) {
        int i=0;
        while(i<arr.length-1) {
            if(arr[i]==i+1) {
                i++;
            } else {
                // swap with its correct index
                int temp=arr[i];
                arr[i]=arr[temp-1];
                arr[temp-1]=temp;
            }
        }
        return arr;
    }
